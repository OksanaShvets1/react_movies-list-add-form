{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","pattern","undefined","onBlur","useState","Math","random","toString","slice","id","touched","setTouched","error","setError","handleBlurValidation","input","hasError","isValid","test","htmlFor","classNames","type","placeholder","event","target","IMDB_PATTERN","IMAGE_PATTERN","NewMovie","onAdd","setMovie","isValidForm","setIsValidForm","count","setCount","handleValidation","trim","onSubmit","preventDefault","newValue","prevState","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe9f9036.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  pattern?: RegExp,\n  onBlur: (isValid: boolean) => void\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  pattern = undefined,\n  onBlur = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const validateInput = (input: string): boolean => {\n    if (!pattern) {\n      return true;\n    }\n\n    return pattern.test(input);\n  };\n\n  const handleBlurValidation = () => {\n    setTouched(true);\n    const hasError = required && !value;\n    const isValid = !hasError && validateInput(value);\n\n    setError(hasError ? `${label} is required` : null);\n    onBlur(isValid);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': touched && error,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => handleBlurValidation()}\n        />\n      </div>\n\n      {touched && error && (\n        <p className=\"help is-danger\">{error}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst IMDB_PATTERN = /^https?:\\/\\/(?:www\\.)?imdb\\.com\\/title\\/tt\\d{7}\\/?$/i;\nconst IMAGE_PATTERN = /^https?:\\/\\/.+\\/(.+)\\.(jpe?g|png|gif)$/i;\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [movie, setMovie] = useState<Movie>({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [isValidForm, setIsValidForm] = useState(false);\n\n  const [count, setCount] = useState(0);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAdd(movie);\n\n    setMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n    setIsValidForm(false);\n\n    setCount(count + 1);\n  };\n\n  const handleValidation = () => {\n    setIsValidForm(\n      movie.title.trim() !== ''\n        && (movie.description === '' || movie.description.trim() !== '')\n        && (movie.imgUrl.trim() !== '' || IMAGE_PATTERN.test(movie.imdbUrl))\n        && (movie.imdbUrl.trim() !== '' || IMDB_PATTERN.test(movie.imdbUrl))\n        && movie.imdbId.trim() !== '',\n    );\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={(newValue: string) => {\n          setMovie((prevState) => ({ ...prevState, title: newValue }));\n        }}\n        onBlur={handleValidation}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={(newValue: string) => {\n          setMovie((prevState) => ({ ...prevState, description: newValue }));\n        }}\n        onBlur={handleValidation}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={(newValue: string) => {\n          setMovie((prevState) => ({ ...prevState, imgUrl: newValue }));\n        }}\n        pattern={IMAGE_PATTERN}\n        onBlur={handleValidation}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={(newValue: string) => {\n          setMovie((prevState) => ({ ...prevState, imdbUrl: newValue }));\n        }}\n        pattern={IMDB_PATTERN}\n        onBlur={handleValidation}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={(newValue: string) => {\n          setMovie((prevState) => ({ ...prevState, imdbId: newValue }));\n        }}\n        onBlur={handleValidation}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isValidForm}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const handleAddMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}